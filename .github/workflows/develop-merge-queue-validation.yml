name: 'PR Validate Deploy'
on:
  workflow_call:
    inputs:
      environment:
        description: Environment
        type: string
        required: true
      should_deploy_or_validate:
        description: Specifies the workflow behavior (validate or deploy)
        required: true
        type: string
      base_branch:
        description: Specifies base branch depending on event
        required: true
        type: string

jobs:
  get-changed-modules:
    outputs:
      changed_modules: ${{ steps.detect_changes.outputs.changed_modules }}
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Changed Packages
        env:
          BASE_BRANCH: ${{ inputs.base_branch }}
          DEVOPS_TEAM: ${{ vars.DEVOPS_TEAM }}
          ALLOWED_DEV_MODIFICATIONS: ${{ vars.ALLOWED_DEV_MODIFICATIONS }}
        id: detect_changes
        run: |
          echo "Base branch set to: $BASE_BRANCH"
          chmod +x ./devops-scripts/findChangedModules.sh
          ./devops-scripts/findChangedModules.sh origin/$BASE_BRANCH src/

  validate-qa:
    name: Validate ${{ inputs.environment }}
    if: ${{ inputs.should_deploy_or_validate == 'validate' }}
    needs:
      - get-changed-modules
    uses: ./.github/workflows/validate-manual.yml
    with:
      environment: ${{ inputs.environment }}
      modules_to_validate: ${{ needs.get-changed-modules.outputs.changed_modules }}
      base_ref: ${{ github.base_ref }}
    secrets: inherit

#  validate-ci-org:
#    name: Validate CI-Org
#    if: ${{ inputs.should_deploy_or_validate == 'validate' }}
#    uses: ./.github/workflows/pr-ci-org-validation.yml
#    secrets: inherit

  deploy-to-qa:
    name: Deploy to ${{ inputs.environment }}
    needs:
      - get-changed-modules
    if: ${{ inputs.should_deploy_or_validate == 'deploy' && needs.get-changed-modules.outputs.changed_modules != '' }}
    uses: ./.github/workflows/validate-manual.yml
    with:
      environment: ${{ inputs.environment }}
      modules_to_deploy: ${{ needs.get-changed-modules.outputs.changed_modules }}
      base_ref: ${{ inputs.base_branch }}
    secrets: inherit

  merge_status:
    name: Merge status
    runs-on: ubuntu-latest
    needs:
      - validate-qa
      - deploy-to-qa
    if: always()
    steps:
      - name: Check ${{ inputs.should_deploy_or_validate }} job
        run: |
          echo "${{ inputs.environment }}"
          echo "${{ inputs.base_branch }}"
          if [[ "${{ needs.validate-qa.result }}" == "failure" || "${{ needs.validate-qa.result }}" == "cancelled" ]]; then
            echo "${{ inputs.environment }} validation was failed"
            exit 1
          elif [[ "${{ needs.validate-ci-org.result }}" == "failure" || "${{ needs.validate-ci-org.result }}" == "cancelled" ]]; then
            echo "Ci-Org validation was failed"  
            exit 1
          elif [[ "${{ needs.deploy-to-qa.result }}" == "failure" || "${{ needs.deploy-to-qa.result }}" == "cancelled" ]]; then
            echo "${{ inputs.environment }} deployment was failed"
            exit 1
          fi
  
  assign_reviewers:
    name: Assign reviewers
    needs:
      - merge_status
    if: always()
    uses: ./.github/workflows/auto-reviewers-assignment.yml
    with:
      pr_result: ${{ needs.merge_status.result }}
    secrets: inherit